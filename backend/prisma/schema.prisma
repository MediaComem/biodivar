// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int         @id @default(autoincrement())
  email                   String      @unique
  username                String?
  password                String
  biovers                 Biovers[]
  trace                   Trace[]
  autor_poi               Poi[]       @relation(name: "poi_autor")
  last_contrubutor_poi    Poi[]       @relation(name: "poi_last_contributor")
  autor_path              Path[]      @relation(name: "path_autor")
  last_contrubutor_path   Path[]      @relation(name: "path_last_contributor")
}

model Biovers {
  id                      Int         @id @default(autoincrement())
  name                    String
  owner                   Int
  trace                   Trace[]
  setting                 Settings?
  User                    User        @relation(fields: [owner], references: [id])
  Poi                     Poi[]
  Path                    Path[]
}

model Trace {
  id                      Int         @id @default(autoincrement())
  autor                   Int
  creation_date           DateTime
  is_public               Boolean
  coordinate_id           Int         
  coordinate              Coordinate  @relation(fields: [coordinate_id], references: [id])
  biovers                 Int
  action_id               Int
  action                  Action      @relation(fields: [action_id], references: [id])
  biovers_fk              Biovers     @relation(fields: [biovers], references: [id])
  User                    User        @relation(fields: [autor], references: [id])
}

model Poi {
  id                      Int         @id @default(autoincrement())
  title                   String
  subtitle                String
  autor                   Int
  creation_date           DateTime
  update_data             DateTime
  last_contributor        Int
  is_public               Boolean
  coordinate_id           Int         
  coordinate              Coordinate  @relation(fields: [coordinate_id], references: [id])
  biovers                 Int
  radius                  Float
  style                   Style?
  visible_from            Float
  symbol                  Symbol?
  media                   Media?
  trigger_mode            String
  metadata                String
  biovers_fk              Biovers     @relation(fields: [biovers], references: [id])
  User                    User        @relation(name: "poi_autor", fields: [autor], references: [id])
  last_contributor_fk     User        @relation(name: "poi_last_contributor", fields: [last_contributor], references: [id])
}

model Path {
  id                      Int         @id @default(autoincrement())
  autor                   Int
  creation_date           DateTime
  update_data             DateTime
  last_contributor        Int
  is_public               Boolean
  is_editable             Boolean
  coordinate_id           Int         
  coordinate              Coordinate  @relation(fields: [coordinate_id], references: [id])
  biovers                 Int
  style                   Style?
  visible_from            Float
  metadata                String
  biovers_fk              Biovers     @relation(fields: [biovers], references: [id])
  User                    User        @relation(name: "path_autor", fields: [autor], references: [id])
  last_contributor_fk     User        @relation(name: "path_last_contributor", fields: [last_contributor], references: [id])
}

model Action {
  id                      Int         @id @default(autoincrement())
  poi                     Int
  path                    Int
  start_date              DateTime
  end_date                DateTime
  is_facing_user          Boolean
  is_visible              Boolean
  caption                 String
  caption_visible         Boolean 
  trace                   Trace?
}

model Style {
  id                      Int         @id @default(autoincrement())
  type                    String
  stroke                  Boolean
  stroke_width            Float
  fill                    Boolean
  elevation               Float
  height                  Float
  noise                   Float
  is_public               Boolean
  poi                     Int?
  poi_fk                  Poi?        @relation(fields: [poi], references: [id])
  path                    Int?
  path_fk                 Path?       @relation(fields: [path], references: [id])
}

model Settings {
  id                      Int         @id @default(autoincrement())
  biovers                 Int
  biovers_fk              Biovers     @relation(fields: [biovers], references: [id])
}

model Coordinate {
  id                      Int         @id @default(autoincrement())
  long                    Float
  lat                     Float
  alt                     Float
  trace                   Trace?
  poi                     Poi?
  path                    Path?
}

model Symbol {
  id                      Int         @id @default(autoincrement())
  media_type_id           Int
  media_type              MediaType   @relation(fields: [media_type_id], references: [id])
  url                     String
  elevation_ground        Float
  is_facing_user          Boolean
  is_visible              Boolean
  poi                     Int?
  poi_fk                  Poi?        @relation(fields: [poi], references: [id])
}

model Media {
  id                      Int         @id @default(autoincrement())
  media_type_id           Int
  media_type              MediaType   @relation(fields: [media_type_id], references: [id])
  url                     String
  elevation_ground        Float
  is_facing_user          Boolean
  is_visible              Boolean
  caption                 String
  caption_visible         Boolean
  poi                     Int?
  poi_fk                  Poi?        @relation(fields: [poi], references: [id])
}

model MediaType {
  id                      Int         @id @default(autoincrement())
  type                    String
  media                   Media[]
  symbol                  Symbol[]
}